name: Deploy .NET API

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
      
      - name: Build and publish
        run: |
          dotnet restore
          dotnet publish -c Release -o ./publish
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
      
      - name: Deploy to EC2 instances
        run: |
          # Create deployment files
          echo "server { listen 80; server_name _; location / { proxy_pass http://localhost:5000; proxy_http_version 1.1; proxy_set_header Upgrade \$http_upgrade; proxy_set_header Connection keep-alive; proxy_set_header Host \$host; proxy_cache_bypass \$http_upgrade; } }" > ./publish/nginx.conf
          
          echo "[Unit]\nDescription=HelloWorld API\nAfter=network.target\n\n[Service]\nWorkingDirectory=/var/www/app\nExecStart=/usr/bin/dotnet /var/www/app/HelloWorldApi.dll\nRestart=always\nUser=www-data\nEnvironment=ASPNETCORE_URLS=http://localhost:5000\nEnvironment=ASPNETCORE_ENVIRONMENT=Production\n\n[Install]\nWantedBy=multi-user.target" > ./publish/app.service
          
          # Deploy to all instances in ASG
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=tag:aws:autoscaling:groupName,Values=artisan-tiling-asg" \
            --parameters '{
              "commands": [
                "sudo mkdir -p /var/www/app",
                "sudo rm -rf /var/www/app/*",
                "cd /tmp",
                "git clone https://github.com/CaringalML/Hello-Word-dotnet-MySQL.git",
                "cd Hello-Word-dotnet-MySQL",
                "dotnet publish -c Release -o /tmp/publish",
                "sudo cp -r /tmp/publish/* /var/www/app/",
                "sudo cp /tmp/publish/nginx.conf /etc/nginx/sites-available/default || sudo bash -c \"echo \\\"server { listen 80; server_name _; location / { proxy_pass http://localhost:5000; proxy_http_version 1.1; proxy_set_header Upgrade \\\\$http_upgrade; proxy_set_header Connection keep-alive; proxy_set_header Host \\\\$host; proxy_cache_bypass \\\\$http_upgrade; } }\\\" > /etc/nginx/sites-available/default\"",
                "sudo bash -c \"echo \\\"[Unit]\\nDescription=HelloWorld API\\nAfter=network.target\\n\\n[Service]\\nWorkingDirectory=/var/www/app\\nExecStart=/usr/bin/dotnet /var/www/app/HelloWorldApi.dll\\nRestart=always\\nUser=www-data\\nEnvironment=ASPNETCORE_URLS=http://localhost:5000\\nEnvironment=ASPNETCORE_ENVIRONMENT=Production\\n\\n[Install]\\nWantedBy=multi-user.target\\\" > /etc/systemd/system/helloworldapi.service\"",
                "sudo chown -R www-data:www-data /var/www/app",
                "sudo systemctl daemon-reload",
                "sudo systemctl restart nginx",
                "sudo systemctl enable helloworldapi",
                "sudo systemctl restart helloworldapi",
                "sudo systemctl status helloworldapi || true",
                "echo \"Deployment completed\""
              ]
            }'
