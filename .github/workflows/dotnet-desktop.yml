name: Deploy .NET API

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
      
      - name: Restore dependencies
        run: dotnet restore
        
      - name: Build
        run: dotnet build --configuration Release --no-restore
      
      - name: Publish application
        run: dotnet publish --configuration Release --no-build -o ./publish
      
      - name: Create deployment package
        run: |
          cd publish
          zip -r ../deploy.zip .
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
      
      - name: Upload deployment package directly to EC2 instances
        run: |
          # Get instance IDs from the Auto Scaling Group
          INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names "artisan-tiling-asg" \
            --query "AutoScalingGroups[0].Instances[*].InstanceId" \
            --output text)
          
          # Deploy to each instance
          for INSTANCE_ID in $INSTANCE_IDS; do
            echo "Deploying to instance $INSTANCE_ID..."
            
            # Upload deployment package directly using SSM
            aws ssm send-command \
              --document-name "AWS-RunShellScript" \
              --targets "Key=instanceids,Values=$INSTANCE_ID" \
              --parameters "commands=[
                # Create temp directory for deployment
                'mkdir -p /tmp/app-deploy',
                'cd /tmp/app-deploy',
                
                # Stop service
                'sudo systemctl stop helloworldapi || echo \"Service not running\"',
                
                # Clean and prepare directory
                'sudo rm -rf /var/www/app/*',
                'sudo mkdir -p /var/www/app',
                
                # Clone directly from GitHub
                'git clone https://github.com/${{ github.repository }}.git app-source',
                'cd app-source',
                
                # Build the application on the server
                'dotnet restore',
                'dotnet publish --configuration Release -o /tmp/app-deploy/publish',
                
                # Copy files to app directory
                'sudo cp -r /tmp/app-deploy/publish/* /var/www/app/',
                
                # Ensure correct nginx configuration
                'sudo bash -c \"cat > /etc/nginx/sites-available/default << EOL
                server {
                    listen 80;
                    server_name _;
                    
                    location / {
                        proxy_pass http://localhost:5000;
                        proxy_http_version 1.1;
                        proxy_set_header Upgrade \\$http_upgrade;
                        proxy_set_header Connection keep-alive;
                        proxy_set_header Host \\$host;
                        proxy_cache_bypass \\$http_upgrade;
                        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;
                        proxy_set_header X-Forwarded-Proto \\$scheme;
                        proxy_set_header X-Real-IP \\$remote_addr;
                    }
                }
                EOL\"',
                
                # Ensure correct service configuration
                'sudo bash -c \"cat > /etc/systemd/system/helloworldapi.service << EOL
                [Unit]
                Description=Artisan Tiling API
                After=network.target
                
                [Service]
                WorkingDirectory=/var/www/app
                ExecStart=/usr/bin/dotnet /var/www/app/HelloWorldApi.dll
                Restart=always
                RestartSec=10
                SyslogIdentifier=helloworldapi
                User=www-data
                Environment=ASPNETCORE_URLS=http://localhost:5000
                Environment=ASPNETCORE_ENVIRONMENT=Production
                
                [Install]
                WantedBy=multi-user.target
                EOL\"',
                
                # Fix permissions
                'sudo chown -R www-data:www-data /var/www/app',
                
                # Reload systemd and restart services
                'sudo systemctl daemon-reload',
                'sudo systemctl restart nginx',
                'sudo systemctl enable helloworldapi',
                'sudo systemctl restart helloworldapi',
                
                # Verify service is running
                'sleep 5',
                'sudo systemctl status helloworldapi',
                'curl -s http://localhost:5000/api/hello || echo \"API endpoint not available yet\"',
                
                # Check logs for errors
                'sudo journalctl -u helloworldapi -n 20 --no-pager'
              ]" \
              --output text
            
            echo "Deployment to $INSTANCE_ID completed"
          done
